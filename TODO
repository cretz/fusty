For MVP:
* Embed web application:
  * Web application by default allowed to write the configuration, so setup can really be bootstrapped in a browser, yay
  * Document the API that both workers and other devs can use
  * Probably embed pieces with https://github.com/jteeuwen/go-bindata
* Enable self-restarts for upgrades or certain config changes
  * Use https://github.com/facebookgo/grace or https://github.com/fvbock/endless to drop nothing
  * Allow self-update from internet ONLY if the user requests (i.e. no automatic phoning home)
* Full, cucumber-esque integration tests (even before unit tests to get same coverage)
  * Probably use https://github.com/DATA-DOG/godog + http://agouti.org/ for testing
* Embedded git client
  * Probably use statically linked https://github.com/libgit2/git2go though https://github.com/speedata/gogit could be
    an option in the future
* Hold metrics
  * Probably use https://github.com/rcrowley/go-metrics at first

Future:
* HA controller support
  * Probably via https://github.com/golang/groupcache (embedded of course). Actually, https://serfdom.io/ would be
    better
  * Have to no longer support from-file configuration except for first-use bootstrapping because it's hard to keep in
    sync on disk because there is no pubsub
  * Might not want to store things like git private keys in shared form and instead error if the one we want isn't on
    local disk at each node we expect it at
* HTTP/HTTPS protocol support
  * Means you can poll HTTP and store that in Git too
* Offer embedded git server
  * Probably would use https://github.com/gogits/gogs
  * Problem here is that we take ownership of data reliability which is ugly